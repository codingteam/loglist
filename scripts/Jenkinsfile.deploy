// This script will build and deploy the current LogList version to the target server.
// Required properties:
// - GIT_BRANCH: name of the branch to be deployed
// - GIT_CREDENTIALS: credentials to download the source code
// - MAINTAINERS: space-separated email list
// - SBT: path to sbt launch script or binary
// - SCP: path to scp executable
// - SSH: path to ssh executable
// - SSH_HOST: name of the target server
// - SSH_LOGIN: login to access target server
// - SSH_PORT: port to access target server
// - SSH_PRIVATE_KEY: private key to access target server
node {
    stage 'Checkout'
    git branch: GIT_BRANCH,
            credentialsId: GIT_CREDENTIALS,
            url: 'git@github.com:codingteam/loglist.git'

    stage 'Clean'
    bat "$SBT clean"

    stage 'Build'
    bat "$SBT dist"

    stage 'Prepare'
    def keyFile = 'loglist.key'
    writeFile file: keyFile, text: SSH_PRIVATE_KEY

    def executeScript = { scriptPath ->
        bat "type $scriptPath | $SSH -o StrictHostKeyChecking=no -i $keyFile -p $SSH_PORT $SSH_LOGIN@$SSH_HOST"
    }

    catchError {
        try {
            stage 'Stop'
            executeScript 'scripts\\stop.sh'

            stage 'Upload'
            bat "$SCP -o StrictHostKeyChecking=no -i $keyFile -P $SSH_PORT scalajvm/target/universal/scalajvm*.zip $SSH_LOGIN@$SSH_HOST:/opt/loglist"

            stage 'Start'
            executeScript 'scripts\\start.sh'
        } finally {
            bat "del $keyFile"
        }
    }

    stage 'Notify'
    def isSuccess = currentBuild.result == null
    def buildStatus = isSuccess ? 'SUCCESS' : currentBuild.result

    mail to: MAINTAINERS, subject: "${env.JOB_NAME}#${env.BUILD_NUMBER}: ${buildStatus}", body: """Build #${env.BUILD_NUMBER} of Jenkins job ${env.JOB_NAME} has been finished with status ${buildStatus}.

Check ${env.BUILD_URL} for details."""
}
